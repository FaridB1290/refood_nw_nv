/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VenteService } from "../vente.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VenteCreateInput } from "./VenteCreateInput";
import { Vente } from "./Vente";
import { VenteFindManyArgs } from "./VenteFindManyArgs";
import { VenteWhereUniqueInput } from "./VenteWhereUniqueInput";
import { VenteUpdateInput } from "./VenteUpdateInput";
import { RefundFindManyArgs } from "../../refund/base/RefundFindManyArgs";
import { Refund } from "../../refund/base/Refund";
import { RefundWhereUniqueInput } from "../../refund/base/RefundWhereUniqueInput";
import { RemboursementFindManyArgs } from "../../remboursement/base/RemboursementFindManyArgs";
import { Remboursement } from "../../remboursement/base/Remboursement";
import { RemboursementWhereUniqueInput } from "../../remboursement/base/RemboursementWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VenteControllerBase {
  constructor(
    protected readonly service: VenteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vente })
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: VenteCreateInput,
  })
  async createVente(@common.Body() data: VenteCreateInput): Promise<Vente> {
    return await this.service.createVente({
      data: {
        ...data,

        panier: data.panier
          ? {
              connect: data.panier,
            }
          : undefined,
      },
      select: {
        co2Evite: true,
        createdAt: true,
        dateVente: true,
        id: true,
        methodePaiement: true,

        panier: {
          select: {
            id: true,
          },
        },

        quantiteVendue: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Vente] })
  @ApiNestedQuery(VenteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ventes(@common.Req() request: Request): Promise<Vente[]> {
    const args = plainToClass(VenteFindManyArgs, request.query);
    return this.service.ventes({
      ...args,
      select: {
        co2Evite: true,
        createdAt: true,
        dateVente: true,
        id: true,
        methodePaiement: true,

        panier: {
          select: {
            id: true,
          },
        },

        quantiteVendue: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async vente(
    @common.Param() params: VenteWhereUniqueInput
  ): Promise<Vente | null> {
    const result = await this.service.vente({
      where: params,
      select: {
        co2Evite: true,
        createdAt: true,
        dateVente: true,
        id: true,
        methodePaiement: true,

        panier: {
          select: {
            id: true,
          },
        },

        quantiteVendue: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: VenteUpdateInput,
  })
  async updateVente(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() data: VenteUpdateInput
  ): Promise<Vente | null> {
    try {
      return await this.service.updateVente({
        where: params,
        data: {
          ...data,

          panier: data.panier
            ? {
                connect: data.panier,
              }
            : undefined,
        },
        select: {
          co2Evite: true,
          createdAt: true,
          dateVente: true,
          id: true,
          methodePaiement: true,

          panier: {
            select: {
              id: true,
            },
          },

          quantiteVendue: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVente(
    @common.Param() params: VenteWhereUniqueInput
  ): Promise<Vente | null> {
    try {
      return await this.service.deleteVente({
        where: params,
        select: {
          co2Evite: true,
          createdAt: true,
          dateVente: true,
          id: true,
          methodePaiement: true,

          panier: {
            select: {
              id: true,
            },
          },

          quantiteVendue: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/refunds")
  @ApiNestedQuery(RefundFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Refund",
    action: "read",
    possession: "any",
  })
  async findRefunds(
    @common.Req() request: Request,
    @common.Param() params: VenteWhereUniqueInput
  ): Promise<Refund[]> {
    const query = plainToClass(RefundFindManyArgs, request.query);
    const results = await this.service.findRefunds(params.id, {
      ...query,
      select: {
        createdAt: true,
        dateRemboursement: true,
        id: true,
        montant: true,
        updatedAt: true,

        vente: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/refunds")
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "update",
    possession: "any",
  })
  async connectRefunds(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() body: RefundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      refunds: {
        connect: body,
      },
    };
    await this.service.updateVente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/refunds")
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "update",
    possession: "any",
  })
  async updateRefunds(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() body: RefundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      refunds: {
        set: body,
      },
    };
    await this.service.updateVente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/refunds")
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "update",
    possession: "any",
  })
  async disconnectRefunds(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() body: RefundWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      refunds: {
        disconnect: body,
      },
    };
    await this.service.updateVente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/remboursements")
  @ApiNestedQuery(RemboursementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Remboursement",
    action: "read",
    possession: "any",
  })
  async findRemboursements(
    @common.Req() request: Request,
    @common.Param() params: VenteWhereUniqueInput
  ): Promise<Remboursement[]> {
    const query = plainToClass(RemboursementFindManyArgs, request.query);
    const results = await this.service.findRemboursements(params.id, {
      ...query,
      select: {
        createdAt: true,
        dateRemboursement: true,
        id: true,
        montant: true,
        updatedAt: true,

        vente: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/remboursements")
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "update",
    possession: "any",
  })
  async connectRemboursements(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() body: RemboursementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      remboursements: {
        connect: body,
      },
    };
    await this.service.updateVente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/remboursements")
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "update",
    possession: "any",
  })
  async updateRemboursements(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() body: RemboursementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      remboursements: {
        set: body,
      },
    };
    await this.service.updateVente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/remboursements")
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "update",
    possession: "any",
  })
  async disconnectRemboursements(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() body: RemboursementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      remboursements: {
        disconnect: body,
      },
    };
    await this.service.updateVente({
      where: params,
      data,
      select: { id: true },
    });
  }
}
