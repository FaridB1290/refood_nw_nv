/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsOptional,
  IsDate,
  IsString,
  ValidateNested,
  IsInt,
} from "class-validator";
import { Type } from "class-transformer";
import { Panier } from "../../panier/base/Panier";
import { Refund } from "../../refund/base/Refund";
import { Remboursement } from "../../remboursement/base/Remboursement";

@ObjectType()
class Vente {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  co2Evite!: number | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateVente!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  methodePaiement!: string | null;

  @ApiProperty({
    required: false,
    type: () => Panier,
  })
  @ValidateNested()
  @Type(() => Panier)
  @IsOptional()
  panier?: Panier | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  quantiteVendue!: number | null;

  @ApiProperty({
    required: false,
    type: () => [Refund],
  })
  @ValidateNested()
  @Type(() => Refund)
  @IsOptional()
  refunds?: Array<Refund>;

  @ApiProperty({
    required: false,
    type: () => [Remboursement],
  })
  @ValidateNested()
  @Type(() => Remboursement)
  @IsOptional()
  remboursements?: Array<Remboursement>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Vente as Vente };
