/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RestaurantEntity } from "./RestaurantEntity";
import { RestaurantEntityCountArgs } from "./RestaurantEntityCountArgs";
import { RestaurantEntityFindManyArgs } from "./RestaurantEntityFindManyArgs";
import { RestaurantEntityFindUniqueArgs } from "./RestaurantEntityFindUniqueArgs";
import { CreateRestaurantEntityArgs } from "./CreateRestaurantEntityArgs";
import { UpdateRestaurantEntityArgs } from "./UpdateRestaurantEntityArgs";
import { DeleteRestaurantEntityArgs } from "./DeleteRestaurantEntityArgs";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";
import { RestaurantEntityService } from "../restaurantEntity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RestaurantEntity)
export class RestaurantEntityResolverBase {
  constructor(
    protected readonly service: RestaurantEntityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RestaurantEntity",
    action: "read",
    possession: "any",
  })
  async _restaurantEntitiesMeta(
    @graphql.Args() args: RestaurantEntityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RestaurantEntity])
  @nestAccessControl.UseRoles({
    resource: "RestaurantEntity",
    action: "read",
    possession: "any",
  })
  async restaurantEntities(
    @graphql.Args() args: RestaurantEntityFindManyArgs
  ): Promise<RestaurantEntity[]> {
    return this.service.restaurantEntities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RestaurantEntity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RestaurantEntity",
    action: "read",
    possession: "own",
  })
  async restaurantEntity(
    @graphql.Args() args: RestaurantEntityFindUniqueArgs
  ): Promise<RestaurantEntity | null> {
    const result = await this.service.restaurantEntity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantEntity)
  @nestAccessControl.UseRoles({
    resource: "RestaurantEntity",
    action: "create",
    possession: "any",
  })
  async createRestaurantEntity(
    @graphql.Args() args: CreateRestaurantEntityArgs
  ): Promise<RestaurantEntity> {
    return await this.service.createRestaurantEntity({
      ...args,
      data: {
        ...args.data,

        utilisateur: args.data.utilisateur
          ? {
              connect: args.data.utilisateur,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantEntity)
  @nestAccessControl.UseRoles({
    resource: "RestaurantEntity",
    action: "update",
    possession: "any",
  })
  async updateRestaurantEntity(
    @graphql.Args() args: UpdateRestaurantEntityArgs
  ): Promise<RestaurantEntity | null> {
    try {
      return await this.service.updateRestaurantEntity({
        ...args,
        data: {
          ...args.data,

          utilisateur: args.data.utilisateur
            ? {
                connect: args.data.utilisateur,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RestaurantEntity)
  @nestAccessControl.UseRoles({
    resource: "RestaurantEntity",
    action: "delete",
    possession: "any",
  })
  async deleteRestaurantEntity(
    @graphql.Args() args: DeleteRestaurantEntityArgs
  ): Promise<RestaurantEntity | null> {
    try {
      return await this.service.deleteRestaurantEntity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Utilisateur, {
    nullable: true,
    name: "utilisateur",
  })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "any",
  })
  async getUtilisateur(
    @graphql.Parent() parent: RestaurantEntity
  ): Promise<Utilisateur | null> {
    const result = await this.service.getUtilisateur(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
