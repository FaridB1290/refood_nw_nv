/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Panier as PrismaPanier,
  Annulation as PrismaAnnulation,
  Cancellation as PrismaCancellation,
  Sale as PrismaSale,
  Vente as PrismaVente,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class PanierServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PanierCountArgs, "select">): Promise<number> {
    return this.prisma.panier.count(args);
  }

  async paniers<T extends Prisma.PanierFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PanierFindManyArgs>
  ): Promise<PrismaPanier[]> {
    return this.prisma.panier.findMany<Prisma.PanierFindManyArgs>(args);
  }
  async panier<T extends Prisma.PanierFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PanierFindUniqueArgs>
  ): Promise<PrismaPanier | null> {
    return this.prisma.panier.findUnique(args);
  }
  async createPanier<T extends Prisma.PanierCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PanierCreateArgs>
  ): Promise<PrismaPanier> {
    return this.prisma.panier.create<T>(args);
  }
  async updatePanier<T extends Prisma.PanierUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PanierUpdateArgs>
  ): Promise<PrismaPanier> {
    return this.prisma.panier.update<T>(args);
  }
  async deletePanier<T extends Prisma.PanierDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PanierDeleteArgs>
  ): Promise<PrismaPanier> {
    return this.prisma.panier.delete(args);
  }

  async findAnnulations(
    parentId: string,
    args: Prisma.AnnulationFindManyArgs
  ): Promise<PrismaAnnulation[]> {
    return this.prisma.panier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .annulations(args);
  }

  async findCancellations(
    parentId: string,
    args: Prisma.CancellationFindManyArgs
  ): Promise<PrismaCancellation[]> {
    return this.prisma.panier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cancellations(args);
  }

  async findSales(
    parentId: string,
    args: Prisma.SaleFindManyArgs
  ): Promise<PrismaSale[]> {
    return this.prisma.panier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sales(args);
  }

  async findVentes(
    parentId: string,
    args: Prisma.VenteFindManyArgs
  ): Promise<PrismaVente[]> {
    return this.prisma.panier
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ventes(args);
  }

  async getRestaurant(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.panier
      .findUnique({
        where: { id: parentId },
      })
      .restaurant();
  }
}
