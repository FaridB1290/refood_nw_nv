/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Panier } from "./Panier";
import { PanierCountArgs } from "./PanierCountArgs";
import { PanierFindManyArgs } from "./PanierFindManyArgs";
import { PanierFindUniqueArgs } from "./PanierFindUniqueArgs";
import { CreatePanierArgs } from "./CreatePanierArgs";
import { UpdatePanierArgs } from "./UpdatePanierArgs";
import { DeletePanierArgs } from "./DeletePanierArgs";
import { AnnulationFindManyArgs } from "../../annulation/base/AnnulationFindManyArgs";
import { Annulation } from "../../annulation/base/Annulation";
import { CancellationFindManyArgs } from "../../cancellation/base/CancellationFindManyArgs";
import { Cancellation } from "../../cancellation/base/Cancellation";
import { SaleFindManyArgs } from "../../sale/base/SaleFindManyArgs";
import { Sale } from "../../sale/base/Sale";
import { VenteFindManyArgs } from "../../vente/base/VenteFindManyArgs";
import { Vente } from "../../vente/base/Vente";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { PanierService } from "../panier.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Panier)
export class PanierResolverBase {
  constructor(
    protected readonly service: PanierService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "read",
    possession: "any",
  })
  async _paniersMeta(
    @graphql.Args() args: PanierCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Panier])
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "read",
    possession: "any",
  })
  async paniers(@graphql.Args() args: PanierFindManyArgs): Promise<Panier[]> {
    return this.service.paniers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Panier, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "read",
    possession: "own",
  })
  async panier(
    @graphql.Args() args: PanierFindUniqueArgs
  ): Promise<Panier | null> {
    const result = await this.service.panier(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Panier)
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "create",
    possession: "any",
  })
  async createPanier(@graphql.Args() args: CreatePanierArgs): Promise<Panier> {
    return await this.service.createPanier({
      ...args,
      data: {
        ...args.data,

        restaurant: args.data.restaurant
          ? {
              connect: args.data.restaurant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Panier)
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async updatePanier(
    @graphql.Args() args: UpdatePanierArgs
  ): Promise<Panier | null> {
    try {
      return await this.service.updatePanier({
        ...args,
        data: {
          ...args.data,

          restaurant: args.data.restaurant
            ? {
                connect: args.data.restaurant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Panier)
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "delete",
    possession: "any",
  })
  async deletePanier(
    @graphql.Args() args: DeletePanierArgs
  ): Promise<Panier | null> {
    try {
      return await this.service.deletePanier(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Annulation], { name: "annulations" })
  @nestAccessControl.UseRoles({
    resource: "Annulation",
    action: "read",
    possession: "any",
  })
  async findAnnulations(
    @graphql.Parent() parent: Panier,
    @graphql.Args() args: AnnulationFindManyArgs
  ): Promise<Annulation[]> {
    const results = await this.service.findAnnulations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Cancellation], { name: "cancellations" })
  @nestAccessControl.UseRoles({
    resource: "Cancellation",
    action: "read",
    possession: "any",
  })
  async findCancellations(
    @graphql.Parent() parent: Panier,
    @graphql.Args() args: CancellationFindManyArgs
  ): Promise<Cancellation[]> {
    const results = await this.service.findCancellations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Sale], { name: "sales" })
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  async findSales(
    @graphql.Parent() parent: Panier,
    @graphql.Args() args: SaleFindManyArgs
  ): Promise<Sale[]> {
    const results = await this.service.findSales(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Vente], { name: "ventes" })
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "read",
    possession: "any",
  })
  async findVentes(
    @graphql.Parent() parent: Panier,
    @graphql.Args() args: VenteFindManyArgs
  ): Promise<Vente[]> {
    const results = await this.service.findVentes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurant",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurant(
    @graphql.Parent() parent: Panier
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
