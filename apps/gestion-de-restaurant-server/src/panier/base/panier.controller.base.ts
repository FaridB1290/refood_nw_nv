/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PanierService } from "../panier.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PanierCreateInput } from "./PanierCreateInput";
import { Panier } from "./Panier";
import { PanierFindManyArgs } from "./PanierFindManyArgs";
import { PanierWhereUniqueInput } from "./PanierWhereUniqueInput";
import { PanierUpdateInput } from "./PanierUpdateInput";
import { AnnulationFindManyArgs } from "../../annulation/base/AnnulationFindManyArgs";
import { Annulation } from "../../annulation/base/Annulation";
import { AnnulationWhereUniqueInput } from "../../annulation/base/AnnulationWhereUniqueInput";
import { CancellationFindManyArgs } from "../../cancellation/base/CancellationFindManyArgs";
import { Cancellation } from "../../cancellation/base/Cancellation";
import { CancellationWhereUniqueInput } from "../../cancellation/base/CancellationWhereUniqueInput";
import { SaleFindManyArgs } from "../../sale/base/SaleFindManyArgs";
import { Sale } from "../../sale/base/Sale";
import { SaleWhereUniqueInput } from "../../sale/base/SaleWhereUniqueInput";
import { VenteFindManyArgs } from "../../vente/base/VenteFindManyArgs";
import { Vente } from "../../vente/base/Vente";
import { VenteWhereUniqueInput } from "../../vente/base/VenteWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PanierControllerBase {
  constructor(
    protected readonly service: PanierService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Panier })
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: PanierCreateInput,
  })
  async createPanier(@common.Body() data: PanierCreateInput): Promise<Panier> {
    return await this.service.createPanier({
      data: {
        ...data,

        restaurant: data.restaurant
          ? {
              connect: data.restaurant,
            }
          : undefined,
      },
      select: {
        co2Evite: true,
        createdAt: true,
        description: true,
        id: true,
        listeRepas: true,
        nom: true,
        nombreRestants: true,
        nombreVendus: true,
        prix: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Panier] })
  @ApiNestedQuery(PanierFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paniers(@common.Req() request: Request): Promise<Panier[]> {
    const args = plainToClass(PanierFindManyArgs, request.query);
    return this.service.paniers({
      ...args,
      select: {
        co2Evite: true,
        createdAt: true,
        description: true,
        id: true,
        listeRepas: true,
        nom: true,
        nombreRestants: true,
        nombreVendus: true,
        prix: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Panier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async panier(
    @common.Param() params: PanierWhereUniqueInput
  ): Promise<Panier | null> {
    const result = await this.service.panier({
      where: params,
      select: {
        co2Evite: true,
        createdAt: true,
        description: true,
        id: true,
        listeRepas: true,
        nom: true,
        nombreRestants: true,
        nombreVendus: true,
        prix: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Panier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: PanierUpdateInput,
  })
  async updatePanier(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() data: PanierUpdateInput
  ): Promise<Panier | null> {
    try {
      return await this.service.updatePanier({
        where: params,
        data: {
          ...data,

          restaurant: data.restaurant
            ? {
                connect: data.restaurant,
              }
            : undefined,
        },
        select: {
          co2Evite: true,
          createdAt: true,
          description: true,
          id: true,
          listeRepas: true,
          nom: true,
          nombreRestants: true,
          nombreVendus: true,
          prix: true,

          restaurant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Panier })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePanier(
    @common.Param() params: PanierWhereUniqueInput
  ): Promise<Panier | null> {
    try {
      return await this.service.deletePanier({
        where: params,
        select: {
          co2Evite: true,
          createdAt: true,
          description: true,
          id: true,
          listeRepas: true,
          nom: true,
          nombreRestants: true,
          nombreVendus: true,
          prix: true,

          restaurant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/annulations")
  @ApiNestedQuery(AnnulationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Annulation",
    action: "read",
    possession: "any",
  })
  async findAnnulations(
    @common.Req() request: Request,
    @common.Param() params: PanierWhereUniqueInput
  ): Promise<Annulation[]> {
    const query = plainToClass(AnnulationFindManyArgs, request.query);
    const results = await this.service.findAnnulations(params.id, {
      ...query,
      select: {
        createdAt: true,
        dateAnnulation: true,
        id: true,

        panier: {
          select: {
            id: true,
          },
        },

        raison: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/annulations")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async connectAnnulations(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: AnnulationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      annulations: {
        connect: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/annulations")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async updateAnnulations(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: AnnulationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      annulations: {
        set: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/annulations")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async disconnectAnnulations(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: AnnulationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      annulations: {
        disconnect: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cancellations")
  @ApiNestedQuery(CancellationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Cancellation",
    action: "read",
    possession: "any",
  })
  async findCancellations(
    @common.Req() request: Request,
    @common.Param() params: PanierWhereUniqueInput
  ): Promise<Cancellation[]> {
    const query = plainToClass(CancellationFindManyArgs, request.query);
    const results = await this.service.findCancellations(params.id, {
      ...query,
      select: {
        createdAt: true,
        dateAnnulation: true,
        id: true,

        panier: {
          select: {
            id: true,
          },
        },

        raison: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cancellations")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async connectCancellations(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: CancellationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cancellations: {
        connect: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cancellations")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async updateCancellations(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: CancellationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cancellations: {
        set: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cancellations")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async disconnectCancellations(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: CancellationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cancellations: {
        disconnect: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sales")
  @ApiNestedQuery(SaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  async findSales(
    @common.Req() request: Request,
    @common.Param() params: PanierWhereUniqueInput
  ): Promise<Sale[]> {
    const query = plainToClass(SaleFindManyArgs, request.query);
    const results = await this.service.findSales(params.id, {
      ...query,
      select: {
        co2Evite: true,
        createdAt: true,
        dateVente: true,
        id: true,
        methodePaiement: true,

        panier: {
          select: {
            id: true,
          },
        },

        quantiteVendue: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sales")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async connectSales(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: SaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sales: {
        connect: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sales")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async updateSales(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: SaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sales: {
        set: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sales")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async disconnectSales(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: SaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sales: {
        disconnect: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ventes")
  @ApiNestedQuery(VenteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "read",
    possession: "any",
  })
  async findVentes(
    @common.Req() request: Request,
    @common.Param() params: PanierWhereUniqueInput
  ): Promise<Vente[]> {
    const query = plainToClass(VenteFindManyArgs, request.query);
    const results = await this.service.findVentes(params.id, {
      ...query,
      select: {
        co2Evite: true,
        createdAt: true,
        dateVente: true,
        id: true,
        methodePaiement: true,

        panier: {
          select: {
            id: true,
          },
        },

        quantiteVendue: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ventes")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async connectVentes(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: VenteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ventes: {
        connect: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ventes")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async updateVentes(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: VenteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ventes: {
        set: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ventes")
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "update",
    possession: "any",
  })
  async disconnectVentes(
    @common.Param() params: PanierWhereUniqueInput,
    @common.Body() body: VenteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ventes: {
        disconnect: body,
      },
    };
    await this.service.updatePanier({
      where: params,
      data,
      select: { id: true },
    });
  }
}
