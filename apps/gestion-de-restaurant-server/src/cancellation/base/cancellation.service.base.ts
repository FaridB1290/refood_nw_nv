/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Cancellation as PrismaCancellation,
  Panier as PrismaPanier,
} from "@prisma/client";

export class CancellationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CancellationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cancellation.count(args);
  }

  async cancellations<T extends Prisma.CancellationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CancellationFindManyArgs>
  ): Promise<PrismaCancellation[]> {
    return this.prisma.cancellation.findMany<Prisma.CancellationFindManyArgs>(
      args
    );
  }
  async cancellation<T extends Prisma.CancellationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CancellationFindUniqueArgs>
  ): Promise<PrismaCancellation | null> {
    return this.prisma.cancellation.findUnique(args);
  }
  async createCancellation<T extends Prisma.CancellationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CancellationCreateArgs>
  ): Promise<PrismaCancellation> {
    return this.prisma.cancellation.create<T>(args);
  }
  async updateCancellation<T extends Prisma.CancellationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CancellationUpdateArgs>
  ): Promise<PrismaCancellation> {
    return this.prisma.cancellation.update<T>(args);
  }
  async deleteCancellation<T extends Prisma.CancellationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CancellationDeleteArgs>
  ): Promise<PrismaCancellation> {
    return this.prisma.cancellation.delete(args);
  }

  async getPanier(parentId: string): Promise<PrismaPanier | null> {
    return this.prisma.cancellation
      .findUnique({
        where: { id: parentId },
      })
      .panier();
  }
}
