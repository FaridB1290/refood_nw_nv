/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Cancellation } from "./Cancellation";
import { CancellationCountArgs } from "./CancellationCountArgs";
import { CancellationFindManyArgs } from "./CancellationFindManyArgs";
import { CancellationFindUniqueArgs } from "./CancellationFindUniqueArgs";
import { CreateCancellationArgs } from "./CreateCancellationArgs";
import { UpdateCancellationArgs } from "./UpdateCancellationArgs";
import { DeleteCancellationArgs } from "./DeleteCancellationArgs";
import { Panier } from "../../panier/base/Panier";
import { CancellationService } from "../cancellation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Cancellation)
export class CancellationResolverBase {
  constructor(
    protected readonly service: CancellationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Cancellation",
    action: "read",
    possession: "any",
  })
  async _cancellationsMeta(
    @graphql.Args() args: CancellationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Cancellation])
  @nestAccessControl.UseRoles({
    resource: "Cancellation",
    action: "read",
    possession: "any",
  })
  async cancellations(
    @graphql.Args() args: CancellationFindManyArgs
  ): Promise<Cancellation[]> {
    return this.service.cancellations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Cancellation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Cancellation",
    action: "read",
    possession: "own",
  })
  async cancellation(
    @graphql.Args() args: CancellationFindUniqueArgs
  ): Promise<Cancellation | null> {
    const result = await this.service.cancellation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Cancellation)
  @nestAccessControl.UseRoles({
    resource: "Cancellation",
    action: "create",
    possession: "any",
  })
  async createCancellation(
    @graphql.Args() args: CreateCancellationArgs
  ): Promise<Cancellation> {
    return await this.service.createCancellation({
      ...args,
      data: {
        ...args.data,

        panier: args.data.panier
          ? {
              connect: args.data.panier,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Cancellation)
  @nestAccessControl.UseRoles({
    resource: "Cancellation",
    action: "update",
    possession: "any",
  })
  async updateCancellation(
    @graphql.Args() args: UpdateCancellationArgs
  ): Promise<Cancellation | null> {
    try {
      return await this.service.updateCancellation({
        ...args,
        data: {
          ...args.data,

          panier: args.data.panier
            ? {
                connect: args.data.panier,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cancellation)
  @nestAccessControl.UseRoles({
    resource: "Cancellation",
    action: "delete",
    possession: "any",
  })
  async deleteCancellation(
    @graphql.Args() args: DeleteCancellationArgs
  ): Promise<Cancellation | null> {
    try {
      return await this.service.deleteCancellation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Panier, {
    nullable: true,
    name: "panier",
  })
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "read",
    possession: "any",
  })
  async getPanier(
    @graphql.Parent() parent: Cancellation
  ): Promise<Panier | null> {
    const result = await this.service.getPanier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
