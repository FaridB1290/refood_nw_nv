/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UtilisateurService } from "../utilisateur.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UtilisateurCreateInput } from "./UtilisateurCreateInput";
import { Utilisateur } from "./Utilisateur";
import { UtilisateurFindManyArgs } from "./UtilisateurFindManyArgs";
import { UtilisateurWhereUniqueInput } from "./UtilisateurWhereUniqueInput";
import { UtilisateurUpdateInput } from "./UtilisateurUpdateInput";
import { RestaurantEntityFindManyArgs } from "../../restaurantEntity/base/RestaurantEntityFindManyArgs";
import { RestaurantEntity } from "../../restaurantEntity/base/RestaurantEntity";
import { RestaurantEntityWhereUniqueInput } from "../../restaurantEntity/base/RestaurantEntityWhereUniqueInput";
import { RestaurantFindManyArgs } from "../../restaurant/base/RestaurantFindManyArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { RestaurantWhereUniqueInput } from "../../restaurant/base/RestaurantWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UtilisateurControllerBase {
  constructor(
    protected readonly service: UtilisateurService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Utilisateur })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: UtilisateurCreateInput,
  })
  async createUtilisateur(
    @common.Body() data: UtilisateurCreateInput
  ): Promise<Utilisateur> {
    return await this.service.createUtilisateur({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        localisationLat: true,
        localisationLon: true,
        motDePasse: true,
        nom: true,
        nomEntiteJuridique: true,
        numeroTelephone: true,
        numeroTva: true,
        typeCommerce: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Utilisateur] })
  @ApiNestedQuery(UtilisateurFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async utilisateurs(@common.Req() request: Request): Promise<Utilisateur[]> {
    const args = plainToClass(UtilisateurFindManyArgs, request.query);
    return this.service.utilisateurs({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        localisationLat: true,
        localisationLon: true,
        motDePasse: true,
        nom: true,
        nomEntiteJuridique: true,
        numeroTelephone: true,
        numeroTva: true,
        typeCommerce: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Utilisateur })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async utilisateur(
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<Utilisateur | null> {
    const result = await this.service.utilisateur({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        localisationLat: true,
        localisationLon: true,
        motDePasse: true,
        nom: true,
        nomEntiteJuridique: true,
        numeroTelephone: true,
        numeroTva: true,
        typeCommerce: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Utilisateur })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: UtilisateurUpdateInput,
  })
  async updateUtilisateur(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() data: UtilisateurUpdateInput
  ): Promise<Utilisateur | null> {
    try {
      return await this.service.updateUtilisateur({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          localisationLat: true,
          localisationLon: true,
          motDePasse: true,
          nom: true,
          nomEntiteJuridique: true,
          numeroTelephone: true,
          numeroTva: true,
          typeCommerce: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Utilisateur })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUtilisateur(
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<Utilisateur | null> {
    try {
      return await this.service.deleteUtilisateur({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          localisationLat: true,
          localisationLon: true,
          motDePasse: true,
          nom: true,
          nomEntiteJuridique: true,
          numeroTelephone: true,
          numeroTva: true,
          typeCommerce: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/restaurantEntities")
  @ApiNestedQuery(RestaurantEntityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantEntity",
    action: "read",
    possession: "any",
  })
  async findRestaurantEntities(
    @common.Req() request: Request,
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<RestaurantEntity[]> {
    const query = plainToClass(RestaurantEntityFindManyArgs, request.query);
    const results = await this.service.findRestaurantEntities(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        localisationLat: true,
        localisationLon: true,
        nom: true,
        numeroTelephone: true,
        typeCommerce: true,
        updatedAt: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/restaurantEntities")
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "update",
    possession: "any",
  })
  async connectRestaurantEntities(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RestaurantEntityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantEntities: {
        connect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/restaurantEntities")
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "update",
    possession: "any",
  })
  async updateRestaurantEntities(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RestaurantEntityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantEntities: {
        set: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/restaurantEntities")
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "update",
    possession: "any",
  })
  async disconnectRestaurantEntities(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RestaurantEntityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantEntities: {
        disconnect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/restaurants")
  @ApiNestedQuery(RestaurantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async findRestaurants(
    @common.Req() request: Request,
    @common.Param() params: UtilisateurWhereUniqueInput
  ): Promise<Restaurant[]> {
    const query = plainToClass(RestaurantFindManyArgs, request.query);
    const results = await this.service.findRestaurants(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        localisationLat: true,
        localisationLon: true,
        nom: true,
        numeroTelephone: true,
        typeCommerce: true,
        updatedAt: true,

        utilisateur: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/restaurants")
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "update",
    possession: "any",
  })
  async connectRestaurants(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurants: {
        connect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/restaurants")
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "update",
    possession: "any",
  })
  async updateRestaurants(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurants: {
        set: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/restaurants")
  @nestAccessControl.UseRoles({
    resource: "Utilisateur",
    action: "update",
    possession: "any",
  })
  async disconnectRestaurants(
    @common.Param() params: UtilisateurWhereUniqueInput,
    @common.Body() body: RestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurants: {
        disconnect: body,
      },
    };
    await this.service.updateUtilisateur({
      where: params,
      data,
      select: { id: true },
    });
  }
}
