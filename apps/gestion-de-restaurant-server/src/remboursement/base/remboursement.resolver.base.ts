/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Remboursement } from "./Remboursement";
import { RemboursementCountArgs } from "./RemboursementCountArgs";
import { RemboursementFindManyArgs } from "./RemboursementFindManyArgs";
import { RemboursementFindUniqueArgs } from "./RemboursementFindUniqueArgs";
import { CreateRemboursementArgs } from "./CreateRemboursementArgs";
import { UpdateRemboursementArgs } from "./UpdateRemboursementArgs";
import { DeleteRemboursementArgs } from "./DeleteRemboursementArgs";
import { Vente } from "../../vente/base/Vente";
import { RemboursementService } from "../remboursement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Remboursement)
export class RemboursementResolverBase {
  constructor(
    protected readonly service: RemboursementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Remboursement",
    action: "read",
    possession: "any",
  })
  async _remboursementsMeta(
    @graphql.Args() args: RemboursementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Remboursement])
  @nestAccessControl.UseRoles({
    resource: "Remboursement",
    action: "read",
    possession: "any",
  })
  async remboursements(
    @graphql.Args() args: RemboursementFindManyArgs
  ): Promise<Remboursement[]> {
    return this.service.remboursements(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Remboursement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Remboursement",
    action: "read",
    possession: "own",
  })
  async remboursement(
    @graphql.Args() args: RemboursementFindUniqueArgs
  ): Promise<Remboursement | null> {
    const result = await this.service.remboursement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Remboursement)
  @nestAccessControl.UseRoles({
    resource: "Remboursement",
    action: "create",
    possession: "any",
  })
  async createRemboursement(
    @graphql.Args() args: CreateRemboursementArgs
  ): Promise<Remboursement> {
    return await this.service.createRemboursement({
      ...args,
      data: {
        ...args.data,

        vente: args.data.vente
          ? {
              connect: args.data.vente,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Remboursement)
  @nestAccessControl.UseRoles({
    resource: "Remboursement",
    action: "update",
    possession: "any",
  })
  async updateRemboursement(
    @graphql.Args() args: UpdateRemboursementArgs
  ): Promise<Remboursement | null> {
    try {
      return await this.service.updateRemboursement({
        ...args,
        data: {
          ...args.data,

          vente: args.data.vente
            ? {
                connect: args.data.vente,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Remboursement)
  @nestAccessControl.UseRoles({
    resource: "Remboursement",
    action: "delete",
    possession: "any",
  })
  async deleteRemboursement(
    @graphql.Args() args: DeleteRemboursementArgs
  ): Promise<Remboursement | null> {
    try {
      return await this.service.deleteRemboursement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vente, {
    nullable: true,
    name: "vente",
  })
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "read",
    possession: "any",
  })
  async getVente(
    @graphql.Parent() parent: Remboursement
  ): Promise<Vente | null> {
    const result = await this.service.getVente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
