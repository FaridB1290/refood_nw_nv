/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Refund } from "./Refund";
import { RefundCountArgs } from "./RefundCountArgs";
import { RefundFindManyArgs } from "./RefundFindManyArgs";
import { RefundFindUniqueArgs } from "./RefundFindUniqueArgs";
import { CreateRefundArgs } from "./CreateRefundArgs";
import { UpdateRefundArgs } from "./UpdateRefundArgs";
import { DeleteRefundArgs } from "./DeleteRefundArgs";
import { Vente } from "../../vente/base/Vente";
import { RefundService } from "../refund.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Refund)
export class RefundResolverBase {
  constructor(
    protected readonly service: RefundService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Refund",
    action: "read",
    possession: "any",
  })
  async _refundsMeta(
    @graphql.Args() args: RefundCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Refund])
  @nestAccessControl.UseRoles({
    resource: "Refund",
    action: "read",
    possession: "any",
  })
  async refunds(@graphql.Args() args: RefundFindManyArgs): Promise<Refund[]> {
    return this.service.refunds(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Refund, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Refund",
    action: "read",
    possession: "own",
  })
  async refund(
    @graphql.Args() args: RefundFindUniqueArgs
  ): Promise<Refund | null> {
    const result = await this.service.refund(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Refund)
  @nestAccessControl.UseRoles({
    resource: "Refund",
    action: "create",
    possession: "any",
  })
  async createRefund(@graphql.Args() args: CreateRefundArgs): Promise<Refund> {
    return await this.service.createRefund({
      ...args,
      data: {
        ...args.data,

        vente: args.data.vente
          ? {
              connect: args.data.vente,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Refund)
  @nestAccessControl.UseRoles({
    resource: "Refund",
    action: "update",
    possession: "any",
  })
  async updateRefund(
    @graphql.Args() args: UpdateRefundArgs
  ): Promise<Refund | null> {
    try {
      return await this.service.updateRefund({
        ...args,
        data: {
          ...args.data,

          vente: args.data.vente
            ? {
                connect: args.data.vente,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Refund)
  @nestAccessControl.UseRoles({
    resource: "Refund",
    action: "delete",
    possession: "any",
  })
  async deleteRefund(
    @graphql.Args() args: DeleteRefundArgs
  ): Promise<Refund | null> {
    try {
      return await this.service.deleteRefund(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vente, {
    nullable: true,
    name: "vente",
  })
  @nestAccessControl.UseRoles({
    resource: "Vente",
    action: "read",
    possession: "any",
  })
  async getVente(@graphql.Parent() parent: Refund): Promise<Vente | null> {
    const result = await this.service.getVente(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
