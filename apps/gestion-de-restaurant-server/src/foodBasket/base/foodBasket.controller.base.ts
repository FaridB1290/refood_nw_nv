/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FoodBasketService } from "../foodBasket.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FoodBasketCreateInput } from "./FoodBasketCreateInput";
import { FoodBasket } from "./FoodBasket";
import { FoodBasketFindManyArgs } from "./FoodBasketFindManyArgs";
import { FoodBasketWhereUniqueInput } from "./FoodBasketWhereUniqueInput";
import { FoodBasketUpdateInput } from "./FoodBasketUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FoodBasketControllerBase {
  constructor(
    protected readonly service: FoodBasketService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FoodBasket })
  @nestAccessControl.UseRoles({
    resource: "FoodBasket",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: FoodBasketCreateInput,
  })
  async createFoodBasket(
    @common.Body() data: FoodBasketCreateInput
  ): Promise<FoodBasket> {
    return await this.service.createFoodBasket({
      data: {
        ...data,

        restaurant: data.restaurant
          ? {
              connect: data.restaurant,
            }
          : undefined,
      },
      select: {
        co2Evite: true,
        createdAt: true,
        description: true,
        id: true,
        listeRepas: true,
        nom: true,
        nombreRestants: true,
        nombreVendus: true,
        prix: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FoodBasket] })
  @ApiNestedQuery(FoodBasketFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FoodBasket",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async foodBaskets(@common.Req() request: Request): Promise<FoodBasket[]> {
    const args = plainToClass(FoodBasketFindManyArgs, request.query);
    return this.service.foodBaskets({
      ...args,
      select: {
        co2Evite: true,
        createdAt: true,
        description: true,
        id: true,
        listeRepas: true,
        nom: true,
        nombreRestants: true,
        nombreVendus: true,
        prix: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FoodBasket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FoodBasket",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async foodBasket(
    @common.Param() params: FoodBasketWhereUniqueInput
  ): Promise<FoodBasket | null> {
    const result = await this.service.foodBasket({
      where: params,
      select: {
        co2Evite: true,
        createdAt: true,
        description: true,
        id: true,
        listeRepas: true,
        nom: true,
        nombreRestants: true,
        nombreVendus: true,
        prix: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FoodBasket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FoodBasket",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: FoodBasketUpdateInput,
  })
  async updateFoodBasket(
    @common.Param() params: FoodBasketWhereUniqueInput,
    @common.Body() data: FoodBasketUpdateInput
  ): Promise<FoodBasket | null> {
    try {
      return await this.service.updateFoodBasket({
        where: params,
        data: {
          ...data,

          restaurant: data.restaurant
            ? {
                connect: data.restaurant,
              }
            : undefined,
        },
        select: {
          co2Evite: true,
          createdAt: true,
          description: true,
          id: true,
          listeRepas: true,
          nom: true,
          nombreRestants: true,
          nombreVendus: true,
          prix: true,

          restaurant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FoodBasket })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FoodBasket",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFoodBasket(
    @common.Param() params: FoodBasketWhereUniqueInput
  ): Promise<FoodBasket | null> {
    try {
      return await this.service.deleteFoodBasket({
        where: params,
        select: {
          co2Evite: true,
          createdAt: true,
          description: true,
          id: true,
          listeRepas: true,
          nom: true,
          nombreRestants: true,
          nombreVendus: true,
          prix: true,

          restaurant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
