/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FoodBasket as PrismaFoodBasket,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class FoodBasketServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FoodBasketCountArgs, "select">
  ): Promise<number> {
    return this.prisma.foodBasket.count(args);
  }

  async foodBaskets<T extends Prisma.FoodBasketFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FoodBasketFindManyArgs>
  ): Promise<PrismaFoodBasket[]> {
    return this.prisma.foodBasket.findMany<Prisma.FoodBasketFindManyArgs>(args);
  }
  async foodBasket<T extends Prisma.FoodBasketFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FoodBasketFindUniqueArgs>
  ): Promise<PrismaFoodBasket | null> {
    return this.prisma.foodBasket.findUnique(args);
  }
  async createFoodBasket<T extends Prisma.FoodBasketCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FoodBasketCreateArgs>
  ): Promise<PrismaFoodBasket> {
    return this.prisma.foodBasket.create<T>(args);
  }
  async updateFoodBasket<T extends Prisma.FoodBasketUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FoodBasketUpdateArgs>
  ): Promise<PrismaFoodBasket> {
    return this.prisma.foodBasket.update<T>(args);
  }
  async deleteFoodBasket<T extends Prisma.FoodBasketDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FoodBasketDeleteArgs>
  ): Promise<PrismaFoodBasket> {
    return this.prisma.foodBasket.delete(args);
  }

  async getRestaurant(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.foodBasket
      .findUnique({
        where: { id: parentId },
      })
      .restaurant();
  }
}
