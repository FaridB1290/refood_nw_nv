/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Annulation } from "./Annulation";
import { AnnulationCountArgs } from "./AnnulationCountArgs";
import { AnnulationFindManyArgs } from "./AnnulationFindManyArgs";
import { AnnulationFindUniqueArgs } from "./AnnulationFindUniqueArgs";
import { CreateAnnulationArgs } from "./CreateAnnulationArgs";
import { UpdateAnnulationArgs } from "./UpdateAnnulationArgs";
import { DeleteAnnulationArgs } from "./DeleteAnnulationArgs";
import { Panier } from "../../panier/base/Panier";
import { AnnulationService } from "../annulation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Annulation)
export class AnnulationResolverBase {
  constructor(
    protected readonly service: AnnulationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Annulation",
    action: "read",
    possession: "any",
  })
  async _annulationsMeta(
    @graphql.Args() args: AnnulationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Annulation])
  @nestAccessControl.UseRoles({
    resource: "Annulation",
    action: "read",
    possession: "any",
  })
  async annulations(
    @graphql.Args() args: AnnulationFindManyArgs
  ): Promise<Annulation[]> {
    return this.service.annulations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Annulation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Annulation",
    action: "read",
    possession: "own",
  })
  async annulation(
    @graphql.Args() args: AnnulationFindUniqueArgs
  ): Promise<Annulation | null> {
    const result = await this.service.annulation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Annulation)
  @nestAccessControl.UseRoles({
    resource: "Annulation",
    action: "create",
    possession: "any",
  })
  async createAnnulation(
    @graphql.Args() args: CreateAnnulationArgs
  ): Promise<Annulation> {
    return await this.service.createAnnulation({
      ...args,
      data: {
        ...args.data,

        panier: args.data.panier
          ? {
              connect: args.data.panier,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Annulation)
  @nestAccessControl.UseRoles({
    resource: "Annulation",
    action: "update",
    possession: "any",
  })
  async updateAnnulation(
    @graphql.Args() args: UpdateAnnulationArgs
  ): Promise<Annulation | null> {
    try {
      return await this.service.updateAnnulation({
        ...args,
        data: {
          ...args.data,

          panier: args.data.panier
            ? {
                connect: args.data.panier,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Annulation)
  @nestAccessControl.UseRoles({
    resource: "Annulation",
    action: "delete",
    possession: "any",
  })
  async deleteAnnulation(
    @graphql.Args() args: DeleteAnnulationArgs
  ): Promise<Annulation | null> {
    try {
      return await this.service.deleteAnnulation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Panier, {
    nullable: true,
    name: "panier",
  })
  @nestAccessControl.UseRoles({
    resource: "Panier",
    action: "read",
    possession: "any",
  })
  async getPanier(
    @graphql.Parent() parent: Annulation
  ): Promise<Panier | null> {
    const result = await this.service.getPanier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
