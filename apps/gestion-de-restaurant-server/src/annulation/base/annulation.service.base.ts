/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Annulation as PrismaAnnulation,
  Panier as PrismaPanier,
} from "@prisma/client";

export class AnnulationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnnulationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.annulation.count(args);
  }

  async annulations<T extends Prisma.AnnulationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnulationFindManyArgs>
  ): Promise<PrismaAnnulation[]> {
    return this.prisma.annulation.findMany<Prisma.AnnulationFindManyArgs>(args);
  }
  async annulation<T extends Prisma.AnnulationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnulationFindUniqueArgs>
  ): Promise<PrismaAnnulation | null> {
    return this.prisma.annulation.findUnique(args);
  }
  async createAnnulation<T extends Prisma.AnnulationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnulationCreateArgs>
  ): Promise<PrismaAnnulation> {
    return this.prisma.annulation.create<T>(args);
  }
  async updateAnnulation<T extends Prisma.AnnulationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnulationUpdateArgs>
  ): Promise<PrismaAnnulation> {
    return this.prisma.annulation.update<T>(args);
  }
  async deleteAnnulation<T extends Prisma.AnnulationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AnnulationDeleteArgs>
  ): Promise<PrismaAnnulation> {
    return this.prisma.annulation.delete(args);
  }

  async getPanier(parentId: string): Promise<PrismaPanier | null> {
    return this.prisma.annulation
      .findUnique({
        where: { id: parentId },
      })
      .panier();
  }
}
